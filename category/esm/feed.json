{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎 • All posts by \"esm\" category",
    "description": "Chocolate milk suki!",
    "home_page_url": "https://ningchenhui.github.io",
    "items": [
        {
            "id": "https://ningchenhui.github.io/ESM/NEMO/install/",
            "url": "https://ningchenhui.github.io/ESM/NEMO/install/",
            "title": "Install NEMO notes",
            "date_published": "2022-05-01T15:19:13.000Z",
            "content_html": "<p>NEMO 安装<span id=\"more\"></span></p>\n<h1 id=\"prerequisites\"><a class=\"markdownIt-Anchor\" href=\"#prerequisites\">#</a> Prerequisites</h1>\n<div class=\"note info\">\n<p>Suggestion from J Mak<sup>[4]</sup>:<br>\nGet someone who knows what they are doing to do it for you! Compiling the following from scratch is not the most interesting activity and is actually quite fiddly (especially the HDF5 and NetCDF4 stuff)…if you don’t have access to people who can do that, then try.</p>\n</div>\n<p>Before installing these, run  <code>which h5copy</code>  and  <code>which nc-config</code>  to see if hdf5 and netcdf are already available. If so, we can skip installing them and zlib.</p>\n<h2 id=\"zlib\"><a class=\"markdownIt-Anchor\" href=\"#zlib\">#</a> zlib</h2>\n<p>When I was trying to install Netcdf, I found this requirement in its  <code>INSTALL.md</code>  file. After downloading packages from <span class=\"exturl\" data-url=\"ZnRwOi8vZnRwLnVuaWRhdGEudWNhci5lZHUvcHViL25ldGNkZi9uZXRjZGYtNA==\">server</span>, build it like:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure --prefix<span class=\"token operator\">=</span>/home/user/study/software/zlib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span> check <span class=\"token function\">install</span></pre></td></tr></table></figure><h2 id=\"hdf5\"><a class=\"markdownIt-Anchor\" href=\"#hdf5\">#</a> hdf5</h2>\n<p>Specifying the location of the zlib library:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">CC</span><span class=\"token operator\">=</span>/usr/local/mpich-3.1/bin/mpicc ./configure --with-zlib<span class=\"token operator\">=</span>/home/user/study/software/zlib --prefix<span class=\"token operator\">=</span>/home/user/study/software/hdf5 --<span class=\"token punctuation\">&#123;</span>enable-fortran,disable-shared,enable-parallel<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span> check <span class=\"token function\">install</span></pre></td></tr></table></figure><p>I just add  <code>[--&#123;enable-fortran,disable-shared,enable-parallel&#125;]</code>  from offical documentation of NEMO<sup>[1]</sup>, but it may bring some problems.</p>\n<h2 id=\"netcdf\"><a class=\"markdownIt-Anchor\" href=\"#netcdf\">#</a> netcdf</h2>\n<p>After HDF5 is done, build netcdf, specifying the location of the HDF5, zlib, and<br>\nlibraries in the CPPFLAGS and LDFLAGS environment variables. For example:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">CC</span><span class=\"token operator\">=</span>mpicc <span class=\"token assign-left variable\">CPPFLAGS</span><span class=\"token operator\">=</span>-I/home/user/study/software/hdf5/include <span class=\"token assign-left variable\">LDFLAGS</span><span class=\"token operator\">=</span>-L/home/user/study/software/hdf5/lib <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/home/user/study/software/hdf5/lib:/home/user/study/software/zlib/lib ./configure --prefix<span class=\"token operator\">=</span>/home/user/study/software/netcdf-c-p --<span class=\"token punctuation\">&#123;</span>enable-fortran,disable-shared,enable-parallel,enable-parallel-tests<span class=\"token punctuation\">&#125;</span> --enable-netcdf4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> check <span class=\"token function\">install</span></pre></td></tr></table></figure><p>You can check the output or setting file in  <code>lib</code>  to see whether parallel IO is on.</p>\n<p>Then build netcdf-fortran like:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">CC</span><span class=\"token operator\">=</span>mpicc <span class=\"token assign-left variable\">FC</span><span class=\"token operator\">=</span>mpif90 <span class=\"token assign-left variable\">F77</span><span class=\"token operator\">=</span>mpif77 <span class=\"token assign-left variable\">CPPFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-I/home/user/study/software/netcdf-c-p/include -I/home/user/study/software/hdf5/include -I/home/user/study/software/zlib/include\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">LDFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-L/home/user/study/software/netcdf-c-p/lib -L/home/user/study/software/hdf5/lib -L/home/user/study/software/zlib/lib\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/home/user/study/software/netcdf-c-p/lib:/home/user/study/software/hdf5/lib:/home/user/study/software/zlib/lib <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">LIBS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-lnetcdf -lhdf5_hl -lhdf5 -lz -lcurl\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./configure --disable-shared --prefix<span class=\"token operator\">=</span>/home/user/study/software/netcdf-f-p</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> check</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h2 id=\"ncview\"><a class=\"markdownIt-Anchor\" href=\"#ncview\">#</a> ncview</h2>\n<p>It is not necessary, but it’s a easy tool to check the nc file.</p>\n<p>First install Xaw using  <code>sudo yum install libXaw-devel</code> .<br>\nThen just following [6].</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure --prefix<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/study/software/ncview/ --with-udunits2_incdir<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/study/software/udunits/include/ --with-udunits2_libdir<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/study/software/udunits/lib/ --with-png_incdir<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/study/software/libpng/include/ --with-png_libdir<span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">HOME</span>&#125;</span>/study/software/libpng/lib/</pre></td></tr></table></figure><h2 id=\"xios\"><a class=\"markdownIt-Anchor\" href=\"#xios\">#</a> XIOS</h2>\n<p>Refer to wiki<sup>[2]</sup> and J Mak’s notes<sup>[4]</sup>, first</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>svn checkout -r <span class=\"token number\">1566</span> http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/branchs/xios-2.5 xios-2.5</pre></td></tr></table></figure><p>NEMO has requirements for the XIOS version, remember to check that.</p>\n<p>Then modify files  <code>arch-GCC_LINUX.*</code>  in  <code>arch</code> , add the  <code>-ldl</code>  flag to  <code>HDF5_LIB</code>  in  <code>arch-GCC_local.path</code>  since we build hdf5 library as a not shareable.</p>\n<p>The  <code>boost_dir</code>  and  <code>OASIS_dir</code>  are not necessary, just leave them.</p>\n<p>Finally, run</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./make_xios --arch GCC_LINUX</pre></td></tr></table></figure><h1 id=\"nemo\"><a class=\"markdownIt-Anchor\" href=\"#nemo\">#</a> NEMO</h1>\n<p>Copy and rename an configuration file from an architecture similar to our own. Set the following variables:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>%NCDF_HOME    &#x2F;usr&#x2F;local&#x2F;path&#x2F;to&#x2F;netcdf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>%HDF5_HOME    &#x2F;usr&#x2F;local&#x2F;path&#x2F;to&#x2F;hdf5</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>%XIOS_HOME    &#x2F;home&#x2F;$( whoami )&#x2F;path&#x2F;to&#x2F;xios-trunk</pre></td></tr></table></figure><p>Compile a reference configuration:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./makenemo –m <span class=\"token string\">'my_arch'</span> –r GYRE_PISCES</pre></td></tr></table></figure><p>And find  <code>nemo</code>  in  <code>cfgs/GYRE_PISCES/EXP00</code> .</p>\n<h1 id=\"good-luck\"><a class=\"markdownIt-Anchor\" href=\"#good-luck\">#</a> Good luck!</h1>\n<p>Hope you can find nemo soon.</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>._      ._      ._      ._      ._    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  _.-._)&#96;\\_.-._)&#96;\\_.-._)&#96;\\_.-._)&#96;\\_.-._)&#96;\\_ </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      o         _,           _,             </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        o      .&#39; (        .-&#39; &#x2F;             </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      o     _&#x2F;..._&#39;.    .&#39;   &#x2F;              </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  (    o .-&#39;&#96;      &#96; &#39;-.&#x2F;  _.&#39;               </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  )    ( o)           ;&#x3D; &lt;_         (       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  (      &#39;-.,\\\\__ __.-;&#96;\\   &#39;.        )      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  )  )       \\) |&#96;\\ \\)  &#39;.   \\      (   (   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  (  (           \\_&#x2F;       &#39;-._\\      )   )  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  )  ) jgs                     &#96;    (   (   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\">#</a> Reference</h1>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaXRlcy5uZW1vLW9jZWFuLmlvL3VzZXItZ3VpZGUvaW5zdGFsbC5odG1s\">NEMO documentation</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3JnZS5pcHNsLmp1c3NpZXUuZnIvaW9zZXJ2ZXIvd2lraS9kb2N1bWVudGF0aW9u\">XIOS wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmh1YXdlaWNsb3VkLmNvbS9wcnRnLWt1bnBlbmdocGNzL2t1bnBlbmduZW1vXzAyXzAwMDEuaHRtbA==\">Kunpeng NEMO transplant</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZW1vLXJlbGF0ZWQucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2NvbXBpbGF0aW9uX25vdGVzL25lbW8zNi5odG1s\">J Mak NEMO notes</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZW5vZG8ub3JnL3JlY29yZC8zMzg2MzEwIy5ZbTEwNUpKQnhRSQ==\">NEMO Reference configurations inputs</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDcxMzM4\">NCVIEW installation</span></li>\n</ol>\n",
            "tags": [
                "Memo",
                "Coding"
            ]
        },
        {
            "id": "https://ningchenhui.github.io/ESM/OMARE/omare220205/",
            "url": "https://ningchenhui.github.io/ESM/OMARE/omare220205/",
            "title": "OMARE 学习使用（一）",
            "date_published": "2022-02-05T11:19:13.000Z",
            "content_html": "<p>Learn to run OMARE（i）<span id=\"more\"></span></p>\n<p>step 1 - 解压源代码后，在目录里创建  <code>build</code>  文件夹<br>\n step 2 - 修改文件中的路径</p>\n<pre><code>a. CMakeLists.txt\n  set(JASMIN_VERSION 新路径)\nb. input/GYRE/namelist_cfg (之后可以在build中改)\n  nn_GYRE  resolution\n</code></pre>\n<p>step 3 - 进入  <code>build</code>  文件夹，执行  <code>~/jasmin4/bin/cmake ../</code> <br>\nstep 4 - 执行  <code>make</code>  ( <code>make -j 50</code>  多线程)<br>\nstep 5 -  <code>./main2d ../input/nemo-2d.input</code>   运行不完 / 测试时可  <code>ctrl+c</code>  中止<br>\n step 6 -  <code>ctrl+r</code>   <code>teravap</code>  查看数据 （ <code>/usr/local/teravap/teravap2_2_0.linux- x86_64/bin/teravap</code> ）<br>\n         数据在  <code>./build/javis../dumps.javis</code>  中，打开后 Add - Mesh , Draw。更换数据需要重启。</p>\n<p>修改完 h 文件后执行 step 4</p>\n<p>虚拟机 mpi 运行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mpirun -n <span class=\"token number\">4</span> ./main2d <span class=\"token punctuation\">..</span>/input/nemo-2d.input</pre></td></tr></table></figure>",
            "tags": [
                "Memo",
                "Coding"
            ]
        },
        {
            "id": "https://ningchenhui.github.io/ESM/Data/model02/",
            "url": "https://ningchenhui.github.io/ESM/Data/model02/",
            "title": "安装NCL",
            "date_published": "2021-03-17T16:00:00.000Z",
            "content_html": "<p>NCAR command language (NCL)</p>\n<span id=\"more\"></span>\n<h2 id=\"关于\"><a class=\"markdownIt-Anchor\" href=\"#关于\">#</a> 关于</h2>\n<p>NCAR 命令语言（NCL）是美国国家大气研究中心（NCAR）计算与信息系统实验室的产品，是一种专门为科学数据处理和可视化设计的解释语言。学习使用 NCL 主要是为了处理 NetCDF 格式。</p>\n<h2 id=\"参考网站\"><a class=\"markdownIt-Anchor\" href=\"#参考网站\">#</a> 参考网站</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uY2wudWNhci5lZHUv\">官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uY2wudWNhci5lZHUvZ2V0X3N0YXJ0ZWQuc2h0bWw=\">安装指导</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uY2wudWNhci5lZHUvRG9jdW1lbnQvTWFudWFscy9OQ0xfVXNlcl9HdWlkZS8=\">用户指导手册</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uY2wudWNhci5lZHUvRG9jdW1lbnQvTWFudWFscy9OQ0xfVXNlcl9HdWlkZS9EYXRhLw==\">手册的数据文件</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5weW5nbC51Y2FyLmVkdS8=\">pyngl</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uY2wudWNhci5lZHUvRG9jdW1lbnQvTWFudWFscy9OQ0xfdG9fUHl0aG9uL1RyYW5zaXRpb25fR3VpZGVfTkNMX1B5TkdMLnBkZg==\">ncl2py Guide</span></li>\n</ul>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>NCL 适用于 MacOS，Linux 和运行 Windows 10 Linux 子系统的 Windows 系统。换新笔记本后我安装了 WSL，所以这里在 WSL 中安装。<br>\n首先要安装 conda，这里按提示安装了 miniconda。（难怪我在超算的 <code>.bashrc</code>  里只看到了 miniconda，没找到 NCL，但找到了 NCO……<br>\n 然后按照建议在 conda 环境下安装 NCL，新环境为 ncl_stable。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create -n ncl_stable -c conda-forge ncl</pre></td></tr></table></figure><p>每次进入该环境，执行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> activate ncl_stable</pre></td></tr></table></figure><p>要显示图形化界面，首先启动 Xming 开启 X11 转接…… 然后执行下面的命令检测</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ncl -V</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ncl <span class=\"token variable\">$NCARG_ROOT</span>/lib/ncarg/nclex/gsun/gsun02n.ncl</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ncl <span class=\"token variable\">$NCARG_ROOT</span>/lib/ncarg/nclex/nug/NUG_multi_timeseries.ncl</pre></td></tr></table></figure><p>就可以看到很漂亮的图啦！</p>\n<p>于是又登上超算找 <code>conda</code> ，结果不能直接用。在 <code>.conda</code>  文件夹里有个 <code>environment.txt</code>  里明明看到了有 <code>anaconda</code>  和 ncl_stable 环境。翻 bashrc 发现有句</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">wanwb</span><span class=\"token operator\">=</span><span class=\"token string\">'source /home/export/online3/cesm06/wanwb/.bashrc'</span></pre></td></tr></table></figure><p>果断执行 <code>wanwb</code> ，可以用 conda 了！可以用 ncl！<br>\n<img style=\"display: inline-block; width: 70%; max-width: 70%; height: auto;\" data-src=\"1.png\" /></p>\n<p>回到 WSL，执行 <code>ng4ex gsun01n</code>  提示 /bin/csh: bad interpreter: No such file or directory 查一下需要安装 C-shell。再次执行，可以看到一些折线图，且工作路径下多了一个 <code>gsun01n.ncl</code>  文件。</p>\n<h2 id=\"配置环境\"><a class=\"markdownIt-Anchor\" href=\"#配置环境\">#</a> 配置环境</h2>\n<p>由于使用了 ncl_stable 环境，就不用再设置变量 <code>NCARG_ROOT</code>  和路径 <code>$NCARG_ROOT/bin</code>  了。<br>\n在家目录下放置 <code>.hluresfile</code>  文件来个性化设置 NCL 图形环境。<br>\n关于代码编辑的高亮，我用了 vscode 连接 WSL，打开 ncl 文件后安装 NCL 扩展即可。不得不说这真的好用。</p>\n<h2 id=\"准备学习\"><a class=\"markdownIt-Anchor\" href=\"#准备学习\">#</a> 准备学习</h2>\n<p>把手册下载下来进行学习！有些大的数据文件在官网上，参考中已经列出来了。</p>\n<img style=\"display: inline-block; width: 70%; max-width: 70%; height: auto;\" data-src=\"2.png\" />\n<p>加载公用函数库： <code>load &quot;$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl&quot;</code> <br>\n 运行样例： <code>ng4ex file.ncl</code> <br>\n 样例数据： <code>$NCARG_ROOT/lib/ncarg/data/nug/</code></p>\n<h2 id=\"几天后\"><a class=\"markdownIt-Anchor\" href=\"#几天后\">#</a> 几天后</h2>\n<p>把手册大致过了一遍，对某些语法感到不适外，在手册最后看到了一章 PyNGL 和 PyNIO 的。于是很疑惑地到官网再一看……<br>\n 好家伙，NCAR 已经不更新 NCL 了，官方都转 python 了</p>\n<p>（3.22：问了师姐，他们那篇论文用的代码基本是 matlab…… 而我没能找到机器上有没有 matlab……）<br>\n（续：matlab 在另一个账号下…… 代码放机器上被清了…… ）</p>\n<h2 id=\"pyngl-pynio\"><a class=\"markdownIt-Anchor\" href=\"#pyngl-pynio\">#</a> PyNGL &amp; PyNIO</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda create --name pyn_env --channel conda-forge pynio pyngl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">source</span> activate pyn_env</pre></td></tr></table></figure><p>报错了，可能版本不兼容。删除环境重建</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda <span class=\"token function\">env</span> remove --name pyn_env</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda create --name pyn_env --channel conda-forge/label/cf201901 xarray netcdf4 scipy pyngl pynio</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">source</span> activate pyn_env</pre></td></tr></table></figure><p>最后清理下安装的包</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conda clean -a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda clean -p</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conda clean -t</pre></td></tr></table></figure>",
            "tags": [
                "Tool"
            ]
        },
        {
            "id": "https://ningchenhui.github.io/ESM/Data/model01/",
            "url": "https://ningchenhui.github.io/ESM/Data/model01/",
            "title": "初识NetCDF",
            "date_published": "2021-03-16T09:08:20.000Z",
            "content_html": "<p>Network Common Data Form (NetCDF)</p>\n<span id=\"more\"></span>\n<!--ncl-->\n<h2 id=\"关于\"><a class=\"markdownIt-Anchor\" href=\"#关于\">#</a> 关于</h2>\n<p>Unidata 网络通用数据格式（netCDF）是用于科学数据访问的接口，并且是一个自由分发的提供了该接口的实现软件库。netCDF 库还定义了用于表示科学数据数据格式。 接口，库和格式共同支持科学数据的创建，访问和共享。</p>\n<h2 id=\"参考网站\"><a class=\"markdownIt-Anchor\" href=\"#参考网站\">#</a> 参考网站</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudW5pZGF0YS51Y2FyLmVkdS9zb2Z0d2FyZS9uZXRjZGYv\">官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VuaWRhdGEvbmV0Y2RmLWM=\">GitHub</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93dzIubWF0aHdvcmtzLmNuL2hlbHAvbWF0bGFiL25ldHdvcmstY29tbW9uLWRhdGEtZm9ybS5odG1sP3NfdGlkPUNSVVhfbGZ0bmF2\">Matlab</span></li>\n</ul>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>因为还不太熟悉超算服务器，我先把其中一个月的数据传到了本地，然后用 Matlab 查看。</p>\n<ol>\n<li>\n<p><code>ncdisp</code>  在命令行窗口中显示 NetCDF 数据源内容</p>\n<pre><code> FileName='T045_D.cice.h.0036-01.nc';\n ncdisp(FileName)\n</code></pre>\n <img style=\"display: inline-block; width: 70%; max-width: 70%; height: auto;\" data-src=\"1.png\" />\n<p>后面有非常多的变量……</p>\n</li>\n<li>\n<p><code>ncinfo</code>  以结构体形式返回有关 NetCDF 数据源的信息</p>\n<pre><code> finfo = ncinfo(FileName);\n</code></pre>\n</li>\n<li>\n<p><code>ncread</code>  读取 NetCDF 数据源中的变量数据</p>\n<pre><code> iceVolume=ncread(FileName,'vicen001_d'); %读取全部\n start=[100,200,1];count=[Inf,Inf,1];stride=[5,5,1];%读取部分，分别是起始点、数量、间隔\n iceVolumePart=ncread(FileName,'vicen001_d',start,count,stride);\n surf(double(iceVolumePart));\n title('Ice Volume');\n</code></pre>\n <img style=\"display: inline-block; width: 70%; max-width: 70%; height: auto;\" data-src=\"2.png\" />\n</li>\n<li>\n<p>NetCDF 包<br>\n为了对读写过程进行更多控制，可使用包含低级函数的 NetCDF 库程序包。详细可查看 matlab 官方文档。</p>\n</li>\n</ol>\n",
            "tags": [
                "Tool"
            ]
        }
    ]
}